1. 테스트 메소드
	- test(name, fn, timeout):
		name: 테스트 명
		fn: 테스트 로직
		timeout(optional): default 5초, 제한시간 설정.
	
	- test, expect는 creat-react-app에서 globally롤 설정하여 import 할 필요없음
	- describe(name, fn)
	
2. TDD(Test Driven Development)
	- 비즈니스 로직 전에 테스트 코드를 작성하는 개발 프로세스
	- 테스트 코드 작성 후, 테스트가 통과하도록 비즈니스 로직을 작성
	- TDD 프로세스
		1. 특정 기능의 기능을 확인하는 테스트 생성
		2. 재실행 시 테스트를 성공적으로 실행할 소프트웨어 코드 작성
		3. 테스트가 계속 통과되도록 하면서 최적화를 위해 코드를 리팩터링합니다.

Jest =====================================================================
3. npm test watch mode

4. filtering tests
	- test.only, test.skip
	
5. Grouping tests
	- describe()
	
6. file name convention
	- Greet.text.jsx
	- Greet.spec.jsx
	_ __test__ 폴더

7. code coverage
	- Statement coverage : 소프트웨어 코드에서 실행된 명령문의 수
	- Branches coverage : 제어 구조의 분기(예: if 문)가 실행된 분기 수
	- Function coverage : 정의된 함수 중 몇 개가 호출되었는지
	- Line coverage : 얼마나 많은 소스 코드 라인이 테스트되었는지
	
	scripts에 coverage 추가
	"coverage" : "react-scripts test --coverage"
	
8. Assertions
	- expect(value)
	- matcher
		(1) jest 기본 matcher : https://jestjs.io/docs/using-matchers
		(2) jest-dom : https://github.com/testing-library/jest-dom
	
React Testing Library	===================================================
9. 
	What to test?
	(1) Test component renders
	(2) Test component renders with props
	(3) Test component renders in different states
	(4) Test component reacts to events (Button, form)
	
	What not to test?
	(1) Implementation details 
	(2) Third party code : 외부 라이브러리를 테스트 하지말자 (ex. MUI)
	(3) Code that is not important from a user point of view
		-> formatter 메소드는 테스트하지말고 포맷된 text를 테스트하면 된다
		
10. RTL Queries 
	- 페이지의 Element들을 찾기위한 메소드
	- Single element
		getBy, queryBy, findBy
		-> Element가 없거나, 하나 이상일경우 Error
	- Multiple element
		getAllBy, queryAllBy, findAllBy
	- suffix
		Role, LabelText, PlaceHolderText, Text, DisplayValue, AltText, Title, TextId

11. getByRole
	- html의 role를 사용하여 element 선택
	- toBeInTheDoument() 사용
	- default html role : https://www.w3.org/TR/html-aria/#docconformance
	- custom html role : <div role="test">
	- options
		name (string): label of a form element | inner text | value of aria-label
		level (number): heading role | aria-level
		more information in offical document
	
13. getByLabelText 
	- label text로 연결된 input 등을 찾음
	- option:
		select : html tag

14. getByPlaceHolderText
	- input, textarea의 placeHolder로 element 찾음.
	
15. getByText
	- p, span, div의 innerText로 element 찾음

16. getByDisplayValue
	- input, textarea, select 
	
17. getByAltText
	- img, input, area, custom tag
	
18. TextMatch
	- Qeury 메소드들의 첫번째 인자
	- String: full string match
	
19. queryBy, queryAllBy
	- queryBy: 
		- 일치하는 요소 반환, 일치하는 요소가 없으면 null 반환
		- 하나 이상의 요소가 일치하는 error
		- 렌더링 되지 않는 요소를 테스트할 때 유용
	- queryAllBy:
		- 일치한 요소의 Array 반환, 일치하는 요소가 없으면 빈 Array 반환
	
20. findBy, findAllBy
	- findBy: 
		- promise 반환, 일치하는 요소가 없으면 reject
		
	- findAllBy:
		- promise array 반환
		
21. Manual Queries
	const {container} = render(<MyComponent />)
	const foo = container.querySelector('[data-foo="bar"]')
	
22. debugging
	- screen.debug()
	- logRoles()

23. testing playground tool

user event ===================================================
24. pointer interaction
	- user.setup()
	- user.click()
	- pointer api
		- pointer({"key", "[MouseLeft]"})
		
25. Keyboard interaction
	- user.type(): input 입력
	- user.tap(): Tab 버튼
	- user.clear()
	- user.selectOpotions()
	- user.upload()
	
	- keyboard()

Provider ====================================================
26. provider
	- component를 감싸고 있는 Provider component(Route, MUI 등등) 테스트 적용
	- render(component, option)
		option : {
			wrapper: {Provider Component Name}
		}
		
27. Custom Render Functions
	- https://testing-library.com/docs/react-testing-library/setup#custom-render
	
28. Custom React Hooks
	- renderHook()
	- act()

Mock===========================================================
29. Mocking Functions
	- jest.fn()
	
30. Mocking HTTP Requests

31. MSW(Mock Service Worker)
	- https://mswjs.io/docs/getting-started/install#install
	- https://mswjs.io/docs/getting-started/integrate/node#using-create-react-app
	
Static analysis testing ========================================
 - 동적 테스트는 코드가 작동하는지 여부를 확인하는 반면 정적 분석은 코드가 잘 작성되었는지 여부를 확인합니다.
 
32. ESlint
	- vscode Plugin
	
	- npm i --dev eslint-plugin-jset-dom
	- "eslintConfig": {
		"extends": [
		  "react-app",
		  "react-app/jest",
		  "plugin:jest-dom/recommended"
		]
	  }
	 - "lint": "eslint --ignore-path .gitignore .",

33. Prettier
	- npm install --save-dev prettier
	- "format": "prettier --ignore-path .gitignore --write \"**/*.{js,jsx,css,scss}\"",
	- .perttierrc.json 작성
	- https://green-grapes.tistory.com/entry/VSCode-prettier-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0